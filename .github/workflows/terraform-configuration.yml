name: Terraform CI/CD

on:
  push:
    branches:
      - main  # Workflow triggered on push to the 'main' branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g., dev, prod)'
        required: true
        default: 'dev'
      action:
        description: 'Choose action (apply or destroy)'
        required: true
        default: 'apply'
        options:
          - apply
          - destroy
      instance_type:
        description: 'Type of EC2 instance'
        required: true
        default: 't2.micro'
      ami_id:
        description: 'AMI ID to use for EC2 instance'
        required: true
        default: 'ami-04b4f1a9cf54c11d0'
      ssh_access_cidr:
        description: 'CIDR block for SSH access'
        required: true
        default: '10.0.0.0/16'
      key_name:
        description: 'SSH key name for EC2 instance'
        required: true
        default: 'test111'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="instance_type=${{ github.event.inputs.instance_type }}" \
          -var="ami_id=${{ github.event.inputs.ami_id }}" \
          -var="ssh_access_cidr=${{ github.event.inputs.ssh_access_cidr }}" \
          -var="key_name=${{ github.event.inputs.key_name }}"

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="instance_type=${{ github.event.inputs.instance_type }}" \
          -var="ami_id=${{ github.event.inputs.ami_id }}" \
          -var="ssh_access_cidr=${{ github.event.inputs.ssh_access_cidr }}" \
          -var="key_name=${{ github.event.inputs.key_name }}"

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="instance_type=${{ github.event.inputs.instance_type }}" \
          -var="ami_id=${{ github.event.inputs.ami_id }}" \
          -var="ssh_access_cidr=${{ github.event.inputs.ssh_access_cidr }}" \
          -var="key_name=${{ github.event.inputs.key_name }}"
